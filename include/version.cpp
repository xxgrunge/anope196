/* Build bumper
 *
 * (C) 2003-2012 Anope Team
 * Contact us at team@anope.org
 *
 * Please read COPYING and README for further details.
 *
 * Based on the original code of Epona by Lara.
 * Based on the original code of Services by Andy Church.
 */

#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <list>

int main(int argc, char *argv[])
{
	if (argc < 3)
	{
		std::cout << "Syntax: " << argv[0] << " <src/version.sh> <version.h>" << std::endl;
		return 1;
	}

	std::fstream fd;

	fd.clear();
	fd.open(argv[1], std::ios::in);
	if (!fd.is_open())
	{
		std::cout << "Error: Unable to open src/version.sh for reading: " << argv[1] << std::endl;
		return 1;
	}

	std::string filebuf;
	std::list<std::pair<std::string, std::string> > versions;
	while (getline(fd, filebuf))
	{
		if (!filebuf.find("VERSION_"))
		{
			size_t eq = filebuf.find('=');

			std::string type = filebuf.substr(8, 5);
			std::string value = filebuf.substr(eq + 2, filebuf.length() - eq - 3);
			versions.push_back(std::make_pair(type, value));
		}
	}

	fd.close();

	fd.clear();
	fd.open(argv[2], std::ios::in);

	std::string version_build = "#define VERSION_BUILD	1";
	std::string build = "#define BUILD	1";
	std::string version_extra;
	if (fd.is_open())
	{
		while (getline(fd, filebuf))
		{
			if (!filebuf.find("#define VERSION_BUILD"))
				version_build = filebuf;
			else if (!filebuf.find("#define VERSION_EXTRA"))
			{
				size_t q = filebuf.find('"');

				version_extra = filebuf.substr(q + 1, filebuf.length() - q - 2);
			}
			else if (!filebuf.find("#define BUILD"))
			{
				size_t tab = filebuf.find('	');

				int ibuild = atoi(filebuf.substr(tab + 1).c_str()) + 1;

				std::stringstream ss;
				ss << "#define BUILD	" << ibuild;
				build = ss.str();
			}
		}

		fd.close();
	}

	fd.clear();
	fd.open(argv[2], std::ios::out);

	if (!fd.is_open())
	{
		std::cout << "Error: Unable to include/version.h for writing: " << argv[2] << std::endl;
		return 1;
	}

	fd << "/* This file is automatically generated by version.cpp - do not edit it! */" << std::endl;

	for (std::list<std::pair<std::string, std::string> >::iterator it = versions.begin(), it_end = versions.end(); it != it_end; ++it)
	{
		if (it->first == "EXTRA")
			fd << "#define VERSION_EXTRA \"" << (!version_extra.empty() ? version_extra : "") << (version_extra.find(it->second) == std::string::npos ? it->second  : "") << "\"" << std::endl;
		else
			fd << "#define VERSION_" << it->first << " " << it->second << std::endl;
	}

	fd << version_build << std::endl;
	fd << build << std::endl;

	fd.close();

	return 0;
}
